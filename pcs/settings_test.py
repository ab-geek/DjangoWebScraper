"""
Django settings for pcs project.

Generated by 'django-admin startproject' using Django 1.8.2.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""
from __future__ import absolute_import
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '*9infr0kdrpxuhd0i89vhqeak5tyk8cjwm4u7(n*!l_zzbzb1e'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'main',
    'adminplus',
)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
)

ROOT_URLCONF = 'pcs.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

TEMPLATE_DIRS=(
 "/root/pcs/main/",
)

WSGI_APPLICATION = 'pcs.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

'''
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}
'''

import socket
hostname  = socket.gethostname()
if hostname == 'Scrappers':
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': 'pcs',
            'USER': 'root',
            'PASSWORD': 'password',
            'PORT': 3306
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }



# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_URL = '/static/'

#MAIN_HOST = 'localhost'

# CELERY STUFF
BROKER_URL = 'redis://localhost:6379'
CELERY_RESULT_BACKEND = 'redis://localhost:6379'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
#CELERY_IMPORTS = ("tasks",)

'''
from celery.schedules import crontab
CELERYBEAT_SCHEDULE = {
    'check_status': {
        'task': 'check_status',
        'schedule': crontab(minute='*/1')
    }
}
'''


'''
BROKER_URL = 'redis://%s:6379/0' % MAIN_HOST
CELERY_RESULT_BACKEND = 'redis://%s:6379/0' % MAIN_HOST
CELERYD_POOL_RESTARTS = True
CELERYD_MAX_TASKS_PER_CHILD = 10
BROKER_TRANSPORT_OPTIONS = {'visibility_timeout': 432000}


from celery.schedules import crontab
CELERYBEAT_SCHEDULE = {
    'scrape-sites': {
        'task': 'main.tasks.scrape_sites',
        'schedule': crontab(minute=0, hour='0,12') # midnight and noon
    },
    'generate-reports': {
        'task': 'main.tasks.generate_reports',
        'schedule': crontab(minute='*/30') # every 30 minutes
    },
    'delete-runs': {
        'task': 'main.delete_runs',
        'schedule': crontab(minute=0, hour=0) # daily at midnight
    }
}

import redis
SCRAPER_CACHE = redis.StrictRedis(host=MAIN_HOST, db=1)

REPORTS_LIMIT = 100000
REPORTS_URL = '/reports/'
REPORTS_ROOT = os.path.join(BASE_DIR, 'reports')
'''
